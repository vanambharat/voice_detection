# -*- coding: utf-8 -*-
"""voice_detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TYqTvqTWBK-6X7BUedy1TWMp9QA8Ov0W
"""

import numpy as np
import pandas as pd
df=pd.read_csv('voice.csv')
df

df.dropna()

m,f=0,0
for i in df['label']:
  if i=='male':
    m+=1
  else:
    f+=1
from matplotlib import pyplot as plt
plt.pie([m,f,],labels = ['male','female'], autopct = "%0.2f%%")

Y = df.iloc[:, -1].values
print(Y)

X = df.iloc[:, :-1].values
print(X)

# import modules
import pandas as pd
from sklearn.linear_model import LinearRegression
from sklearn. model_selection import  train_test_split
 
# read the dataset
df = pd.read_csv('voice.csv')
 
# get the locations
X = df.iloc[:, :-1]
y = df.iloc[:, -1]
 
# split the dataset
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.20, random_state=0)

import matplotlib as mpl
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.tree import DecisionTreeClassifier
clf_model = DecisionTreeClassifier(criterion="gini", random_state=42,max_depth=3, min_samples_leaf=5)   
clf_model.fit(X_train,y_train)

y_predict = clf_model.predict(X_test)

from sklearn.metrics import accuracy_score,classification_report,confusion_matrix
accuracy_score(y_test,y_predict)

from sklearn import metrics
metrics.confusion_matrix(y_test, y_predict)

from sklearn.metrics import classification_report
print(classification_report(y_test, y_predict,labels=['male','female']))

from sklearn.ensemble import RandomForestClassifier
from sklearn.datasets import make_classification
X, y = make_classification(n_samples=1000, n_features=4,
                           n_informative=2, n_redundant=0,
                           random_state=0, shuffle=False)
clf = RandomForestClassifier(max_depth=2, random_state=0)
clf_model.fit(X_train,y_train)
y_predict2 = clf_model.predict(X_test)

accuracy_score(y_test,y_predict2)

from sklearn import metrics
metrics.confusion_matrix(y_test, y_predict2)

from sklearn.metrics import classification_report
print(classification_report(y_test, y_predict2,labels=['male','female']))

from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier

K = []
training = []
test = []
scores = {}
  
for k in range(2, 21):
    clf = KNeighborsClassifier(n_neighbors = k)
    clf.fit(X_train, y_train)
  
    training_score = clf.score(X_train, y_train)
    test_score = clf.score(X_test, y_test)
    K.append(k)
  
    training.append(training_score)
    test.append(test_score)
    scores[k] = [training_score, test_score]

for keys, values in scores.items():
    print(keys, ':', values)

from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, plot_confusion_matrix

knn = KNeighborsClassifier()
from sklearn.model_selection import GridSearchCV
k_range = list(range(1, 31))
param_grid = dict(n_neighbors=k_range)
  
# defining parameter range
grid = GridSearchCV(knn, param_grid, cv=10, scoring='accuracy', return_train_score=False,verbose=1)
  
# fitting the model for grid search
grid_search=grid.fit(X_train, y_train)

accuracy = grid_search.best_score_ *100
print("Accuracy for our training dataset with tuning is : {:.2f}%".format(accuracy) )

plot_confusion_matrix(grid,X_test, y_test,values_format='d' )

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

# Fitting Logistic Regression to the Training set
from sklearn.linear_model import LogisticRegression
classifier = LogisticRegression(random_state = 0)
classifier.fit(X_train, y_train)

# Predicting the Test set results
y_pred = classifier.predict(X_test)

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)

accuracy_score(y_test,y_pred)

print(classification_report(y_test, y_pred,labels=['male','female']))

from sklearn.svm import SVC

# kernel to be set linear as it is binary class
classifier = SVC(kernel='linear')

# traininf the model
classifier.fit(X_train, y_train)

y_pred2 = classifier.predict(X_test)
y_pred2

from sklearn.metrics import accuracy_score

# printing the accuracy of the model
print(accuracy_score(y_test, y_pred2))

cm = confusion_matrix(y_test, y_pred2)

print(classification_report(y_test, y_pred2,labels=['male','female']))